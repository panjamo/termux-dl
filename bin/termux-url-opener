#!/bin/bash
clear
filename=
function makeChapters {
    metadata=./metadata.txt
    rm $metadata 2> /dev/null

    ffmpeg -i "$filename" -f ffmetadata $metadata

    length=$(ffmpeg -i "$filename" 2>&1 | grep Duration | cut -d ' ' -f 4 | sed s/,// )
    lengthInMicroSeconds=$(echo $length | awk -F: '{ print ($1 * 3600000) + ($2 * 60000) + ($3 * 1000) }')

    echo $lengthInMicroSeconds

    chapterMinutes=10
    for i in {0..2000}
    do
        echo [CHAPTER] >> $metadata
        echo TIMEBASE=1/1000 >> $metadata
        echo START=$(($i * $chapterMinutes * 60000)) >> $metadata
        endChapter=$(((($i + 1) * $chapterMinutes * 60000) - 1))
        if [[ $endChapter -lt $lengthInMicroSeconds ]]; then
            echo END=$endChapter >> $metadata
            echo title=Kapitel $i >> $metadata
        else
            echo END=$lengthInMicroSeconds >> $metadata
            echo title=Kapitel $($i + 1) >> $metadata
            break
        fi
    done
    ffmpeg -i "$filename" -i $metadata -map_metadata 1 -codec copy "${filename}.temp"
    mv -f "${filename}.temp" "$filename"
}



# root folder termux
storage='/data/data/com.termux/files/home/storage/'
rootfolderVideo="${storage}movies/"
rootfolderAudio="${storage}music/"

# root folder PC
# rootfolderVideo="/d/temp/hallo/"
# rootfolderAudio="/d/temp/hallo/"

# options
audio="--ignore-config -f \'bestaudio[ext=m4a]\' -i --no-check-certificate --embed-thumbnail --add-metadata"
video="--ignore-config -f \'bestvideo[height<=480]+bestaudio[ext=m4a]/bestvideo+bestaudio/best\' --merge-output-format mp4 -i --no-check-certificate --add-metadata"
videohd="--ignore-config -i --no-check-certificate --add-metadata"

bold=$(tput bold)
normal=$(tput sgr0)
echo "${bold}JOSCH\'s Downloader${normal}"
echo "> ${1}"

#youtube-dl -F $1

echo $'\nDownload as an [Ab]udio or [P]laylist or [V]ideo or [H]D Video file ? (A/V/H/E)'

read -p "> " -n 1 -r
command=$REPLY
echo $''
if [[ $command =~ ^[AaBb]$ ]]; then
	echo "Downloading audio file..."
	pushd $rootfolderAudio
	pwd
	ls -1 -d */ | cat -b
	echo $'\nSelect folder ? (any other character=new folder)'
	read -p "> " -n 2 -r
	echo $''
	folder="$(ls -1 -d */ | sed -n ${REPLY}p 2> /dev/null)"
	if [[ -z "${folder}" ]]; then
		echo $'\nNew folder name ?'
		read -p "> " -r
		echo $''
		mkdir "$command"
    	folder="${REPLY}/"
	fi
    popd
	youtube-dl --output "${rootfolderAudio}${folder}%(title)s.%(ext)s" $audio\
        --external-downloader aria2c --external-downloader-args '-c -j 16 -x 16 -s 16 -k 1M'\
        $1
    filename=$(youtube-dl --output "${rootfolderAudio}${folder}%(title)s.%(ext)s" $audio $1 --get-filename)
    title=$(youtube-dl --output "%(title)s" $audio $1 --get-filename)
    # makeChapters

elif [[ $command =~ ^[Pp]$ ]]; then
	echo "Downloading audio playlist..."
	youtube-dl --output "${rootfolderAudio}%(playlist)s/%(playlist_index)s - %(title)s.%(ext)s" $audio\
        $1
elif [[ $command =~ ^[Vv]$ ]]; then
	echo "Downloading video..."
	youtube-dl --output "${rootfolderVideo}%(extractor_key)s/%(uploader)s-%(title)s.%(ext)s" $video\
        --external-downloader aria2c --external-downloader-args '-c -j 16 -x 16 -s 16 -k 1M'\
        ${downloadFast} $1 tee ~/youtube-dl.log
elif [[ $command =~ ^[Hh]$ ]]; then
	echo "Downloading video..."
	youtube-dl --output "${rootfolderVideo}%(extractor_key)s/%(uploader)s-%(title)s.%(ext)s" $videohd\
        --external-downloader aria2c --external-downloader-args '-c -j 16 -x 16 -s 16 -k 1M'\
        $1
else
	echo "Exiting..."
fi

if [[ $command =~ ^[Bb]$ ]]; then
# /C/Program\ Files/VideoLAN/VLC/vlc.exe "$filename"
    termux-open "$filename"
fi


# origFileName=$(cat ~/youtube-dl.log | grep "\[ffmpeg\] Adding metadata to " | sed "s/^\[ffmpeg\] Adding metadata to '\(.*\)'/\1/")
# playFileName=$(echo $origFileName | sed "s/\/data\/data\/com.termux\/files\/home\///")
# echo ${playFileName}
# termux-open ${playFileName}
# read -p "> " -n 1 -r

# playFileNameESC=$(printf '%q' "$playFileName")
# echo ${playFileNameESC}
# termux-open ${playFileNameESC}
# read -p "> " -n 1 -r

termux-notification --title "Download ready..." --content "$title"
